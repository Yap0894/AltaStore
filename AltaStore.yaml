openapi: 3.0.0
servers:
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/dewidyabagus/AltaStore/1.0.0
info:
  description: Back-End (RESTful API) Web Application Alta Store
  version: "1.0.0"
  title: BE Web Application Alta Store
  contact:
    name: Teams API Support
    email: Yapalex1994@gmail.com
  license:
    name: Apache 2.0
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
tags:
  - name: User
    description: Auth and User Information
  - name: Admin
    description: Auth and Admin Information
  - name: Product Category
    description: "Product Category CRUD"
  - name: Product
    description: "Product CRUD"
  - name: Purchase Receiving
    description: "Purchase Receiving CRUD"
  - name: Shopping Cart
    description: ""
  - name: Check Out
    description: ""

paths:
  /user/register:
    post:
      tags:
        - User
      summary: register user
      operationId: register
      parameters:
        - in: query
          name: object
          description: User object that needs to be register
          required: true
          schema:
            $ref: "#/components/schemas/UserRegister"
      responses:
        "200":
          description: "successful operation"
        "400":
          description: bad input parameter
  /user/login:
    post:
      tags:
        - User
      summary: login user
      operationId: login
      parameters:
        - in: query
          name: object
          description: User Object that needs to be login
          required: true
          schema:
            $ref: "#/components/schemas/UserLogin"
      responses:
        "200":
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserIdToken"
        "400":
          description: bad input parameter
  /user/logout/{id}:
    post:
      tags:
        - User
      summary: logout user
      operationId: logout
      parameters:
        - in: path
          name: id
          description: Id to be passed as a path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: "successful operation"
        "400":
          description: bad input parameter
  /user/{id}:
    get:
      tags:
        - User
      summary: get user profile
      operationId: get user profile
      parameters:
        - in: path
          name: id
          description: Id to be passed as a path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserLogin"
        "400":
          description: bad input parameter
    put:
      tags:
        - User
      summary: update user profile
      operationId: update user profile
      parameters:
        - in: path
          name: id
          description: Id to be passed as a path
          required: true
          schema:
            type: string
            format: uuid
        - in: query
          name: object
          description: User object that needs to be update
          required: true
          schema:
            $ref: "#/components/schemas/UserData"
      responses:
        "200":
          description: "successful operation"
        "400":
          description: bad input parameter
    delete:
      tags:
        - User
      summary: delete user
      operationId: delete user
      parameters:
        - in: path
          name: id
          description: Id to be passed as a path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: "successful operation"
        "400":
          description: bad input parameter
  /user/{id}/password:
    put:
      tags:
        - User
      summary: change user password
      operationId: change user password
      parameters:
        - in: path
          name: id
          description: Id to be passed as a path
          required: true
          schema:
            type: string
            format: uuid
        - in: query
          name: object
          description: User object that needs to be update
          required: true
          schema:
            $ref: "#/components/schemas/UserChangePassword"
      responses:
        "200":
          description: "successful operation"
        "400":
          description: bad input parameter

  /admin/register:
    post:
      tags:
        - Admin
      summary: register Admin
      operationId: register
      parameters:
        - in: query
          name: object
          description: Admin object that needs to be register
          required: true
          schema:
            $ref: "#/components/schemas/AdminRegister"
      responses:
        "200":
          description: "successful operation"
        "400":
          description: bad input parameter
  /admin/login:
    post:
      tags:
        - Admin
      summary: login admin
      operationId: login
      parameters:
        - in: query
          name: object
          description: Admin Object that needs to be login
          required: true
          schema:
            $ref: "#/components/schemas/AdminLogin"
      responses:
        "200":
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AdminIdToken"
        "400":
          description: bad input parameter
  /admin/logout/{id}:
    post:
      tags:
        - Admin
      summary: logout Admin
      operationId: logout
      parameters:
        - in: path
          name: id
          description: Id to be passed as a path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: "successful operation"
        "400":
          description: bad input parameter
  /admin/{id}:
    get:
      tags:
        - Admin
      summary: get Admin profile
      operationId: get Admin profile
      parameters:
        - in: path
          name: id
          description: Id to be passed as a path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AdminLogin"
        "400":
          description: bad input parameter
    put:
      tags:
        - Admin
      summary: update Admin profile
      operationId: update Admin profile
      parameters:
        - in: path
          name: id
          description: Id to be passed as a path
          required: true
          schema:
            type: string
            format: uuid
        - in: query
          name: object
          description: Admin object that needs to be update
          required: true
          schema:
            $ref: "#/components/schemas/AdminData"
      responses:
        "200":
          description: "successful operation"
        "400":
          description: bad input parameter
    delete:
      tags:
        - Admin
      summary: delete Admin
      operationId: delete Admin
      parameters:
        - in: path
          name: id
          description: Id to be passed as a path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: "successful operation"
        "400":
          description: bad input parameter
  /admin/{id}/password:
    put:
      tags:
        - Admin
      summary: change Admin password
      operationId: change Admin password
      parameters:
        - in: path
          name: id
          description: Id to be passed as a path
          required: true
          schema:
            type: string
            format: uuid
        - in: query
          name: object
          description: Admin object that needs to be update
          required: true
          schema:
            $ref: "#/components/schemas/AdminChangePassword"
      responses:
        "200":
          description: "successful operation"
        "400":
          description: bad input parameter

  /user/{id}/shoppingcart:
    get:
      tags:
        - Shopping Cart
      summary: Take active shopping cart
      operationId: shoppingCartByUserId
      description: |
        Take an active shopping cart by user id, return the shopping cart id 
        if there is a shopping cart and return an empty when there is no active shopping cart.
      parameters:
        - in: path
          name: id
          description: give the user id to take the active cart
          required: true
          schema:
            type: string
      responses:
        "200":
          description: search results matching criteria
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ActiveShoppingCart"
        "404":
          description: when there is no active shopping cart
  /shoppingcart:
    post:
      tags:
        - Shopping Cart
      summary: Added new shopping cart
      operationId: AddShoppingCart
      description: |
        Adding a new shopping cart when a customer doesn't have an active cart, 
        one customer can only have one active shopping cart
      responses:
        "201":
          description: "shopping cart created"
        "400":
          description: "invalid input, object invalid"
        "409":
          description: "shopping cart already exists"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ShoppingCartId"
        description: Shopping cart to add
  /shoppingcart/{id}:
    get:
      tags:
        - Shopping Cart
      summary: Get detail item in active shopping cart
      operationId: shoppingCartById
      description: |
        Retrieve item details in shopping cart
      parameters:
        - in: path
          name: id
          description: give shopping cart id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: search results matching criteria
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ShoppingCartDetail"
    post:
      tags:
        - Shopping Cart
      summary: Adding a new product to the shopping cart
      operationId: addProductCart
      description: Adding a new product to the shopping cart
      parameters:
        - in: path
          name: id
          description: provide pre-made shopping cart id
          required: true
          schema:
            type: string
      responses:
        "201":
          description: "product created successfully"
        "400":
          description: "invalid input, object invalid"
        "409":
          description: "product already exists"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ItemToShoppingCart"
    put:
      tags:
        - Shopping Cart
      summary: Product updates on shopping cart
      # operationId: updateProductCart
      description: update product qty on shopping cart
      parameters:
        - in: path
          name: id
          description: provide pre-made shopping cart id
          required: true
          schema:
            type: string
      responses:
        "201":
          description: "product updated successfully"
        "400":
          description: "invalid input, object invalid"
        "404":
          description: "product not found"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RenewItemShoppingCart"
    delete:
      tags:
        - Shopping Cart
      summary: Delete product in shopping cart
      description: Delete product in shopping cart
      parameters:
        - in: path
          name: id
          description: provide pre-made shopping cart id
          required: true
          schema:
            type: string
      responses:
        "202":
          description: "product deleted successfully"
        "400":
          description: "invalid input, object invalid"
        "404":
          description: "product not found"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DelItemShoppingCart"

components:
  schemas:
    UserRegister:
      type: object
      properties:
        email:
          type: "string"
        firstName:
          type: "string"
        lastname:
          type: "string"
        password:
          type: "string"
      xml:
        name: "Register User"
    UserLogin:
      type: object
      properties:
        email:
          type: "string"
        password:
          type: "string"
      xml:
        name: "user Login"
    UserIdToken:
      type: object
      properties:
        id:
          type: "string"
          format: "uuid"
        token:
          type: "string"
      xml:
        name: "User Id and Token"
    UserData:
      type: object
      properties:
        email:
          type: "string"
        firstName:
          type: "string"
        lastname:
          type: "string"
        handphone:
          type: "string"
        address:
          type: "string"
      xml:
        name: "User Data"
    UserChangePassword:
      type: object
      properties:
        password:
          type: "string"
        oldpassword:
          type: "string"
      xml:
        name: "Change User Password"

    AdminRegister:
      type: object
      properties:
        email:
          type: "string"
        firstName:
          type: "string"
        lastname:
          type: "string"
        password:
          type: "string"
      xml:
        name: "Register Admin"
    AdminLogin:
      type: object
      properties:
        email:
          type: "string"
        password:
          type: "string"
      xml:
        name: "Admin Login"
    AdminIdToken:
      type: object
      properties:
        id:
          type: "string"
          format: "uuid"
        token:
          type: "string"
      xml:
        name: "Admin Id and Token"
    AdminData:
      type: object
      properties:
        email:
          type: "string"
        firstName:
          type: "string"
        lastname:
          type: "string"
        handphone:
          type: "string"
        address:
          type: "string"
      xml:
        name: "Admin Data"
    AdminChangePassword:
      type: object
      properties:
        password:
          type: "string"
        oldpassword:
          type: "string"
      xml:
        name: "Change Admin Password"
    ShoppingCartDetail:
      type: object
      properties:
        shoppingCode:
          type: string
          format: uuid
        description:
          type: string
        details:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
                example: "101010101"
              name:
                type: string
                example: "Buku Tulis Model xyz"
              categoryName:
                type: string
                example: "Buku Tulis"
              unitName:
                type: string
                example: "Lusin"
              price:
                type: integer
                example: 12000
              qty:
                type: integer
                example: 1
    ActiveShoppingCart:
      type: object
      properties:
        id:
          type: string
          format: uuid
    ShoppingCartId:
      type: object
      properties:
        userid:
          type: string
          format: uuid
    ItemToShoppingCart:
      type: object
      properties:
        productId:
          type: string
          example: "101010101"
        price:
          type: integer
          example: 15000
        qty:
          type: integer
          example: 1
    RenewItemShoppingCart:
      type: object
      properties:
        productId:
          type: string
          example: "101010101"
        qty:
          type: integer
          example: 1
    DelItemShoppingCart:
      type: object
      properties:
        productId:
          type: string
          example: "101010101"
    InventoryItem:
      type: object
      required:
        - id
        - name
        - manufacturer
        - releaseDate
      properties:
        id:
          type: string
          format: uuid
          example: d290f1ee-6c54-4b01-90e6-d701748f0851
        name:
          type: string
          example: Widget Adapter
        releaseDate:
          type: string
          format: date-time
          example: "2016-08-29T09:12:33.001Z"
        manufacturer:
          $ref: "#/components/schemas/Manufacturer"
    Manufacturer:
      required:
        - name
      properties:
        name:
          type: string
          example: ACME Corporation
        homePage:
          type: string
          format: url
          example: "https://www.acme-corp.com"
        phone:
          type: string
          example: 408-867-5309
      type: object
