openapi: 3.0.0
servers:
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/dewidyabagus/AltaStore/1.0.0
info:
  description: Back-End (RESTful API) Web Application Alta Store
  version: "1.0.0"
  title: BE Web Application Alta Store
  license:
    name: Apache 2.0
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
tags:
  - name: User
    description: User Authentication and Information about Users
  - name: Admin
    description: Admin Authentication and Information about Admins
  - name: Product Category
    description: Resource for insert, modifiying and getting Product Categories
  - name: Product
    description: Resource for insert, modifiying and getting Products
  - name: Purchase Receiving
    description: Resource for insert, modifiying and getting Purchase Receivings
  - name: Shopping Cart
    description: ""
  - name: Check Out
    description: ""

paths:
  /user/register: 
    post: 
      tags:
        - User
      summary: Register new user
      operationId: register
      parameters:
        - in: query
          name: object
          description: User object that needs to be register
          required: true
          schema:
            $ref: "#/components/schemas/UserRegister"
      responses:
        200:
          description: Successfully Register
        400:
          description: Bad Input Parameter
        409:
          description: Email Already Registered
      
  /user/login: 
    post: 
      tags:
        - User
      summary: Login user
      operationId: login
      parameters:
        - in: query
          name: object
          description: User Object that needs to be login
          required: true
          schema:
            $ref: "#/components/schemas/UserLogin"
      responses:
        200:
          description: Login Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserIdToken"
        400:
          description: Bad Input Parameter
        401:
          description: Incorrect Email or Password
        404:
          description: User Not Found
  /user/logout/{id}: 
    post: 
      tags:
        - User
      summary: Logout user
      operationId: logout
      parameters:
        - in: query
          name: id
          description: Id to be passed as a query
          required: true
          schema:
            type: string
            format: uuid
      security:
        - bearerAuth: []
      responses:
        200:
          description: Logout Success
        400:
          description: Bad Input Parameter
        401:
          description: Unauthorized
        404:
          description: User Not Found
  /user/{id}: 
    get: 
      tags:
        - User
      summary: Get user profile
      operationId: Get user profile
      parameters:
        - in: query
          name: id
          description: Id to be passed as a query
          required: true
          schema:
            type: string
            format: uuid
      security:
        - bearerAuth: []
      responses:
        200:
          description: Successful Operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserData"
        400:
          description: Bad Input Parameter
        404:
          description: User Not Found
    put:
      tags:
          - User
      summary: Update user profile
      operationId: Update user profile
      parameters:
        - in: query
          name: id
          description: Id to be passed as a query
          required: true
          schema:
            type: string
            format: uuid
        - in: query
          name: object
          description: User object that needs to be update
          required: true
          schema:
            $ref: "#/components/schemas/UserData"
      security:
        - bearerAuth: []
      responses:
        200:
          description: Update User Information Success
        400:
          description: Bad Input Parameter
        404:
          description: User Not Found
    delete:
      tags:
        - User
      summary: Delete user
      operationId: Delete user 
      parameters:
        - in: query
          name: id
          description: Id to be passed as a query
          required: true
          schema:
            type: string
            format: uuid
      security:
        - bearerAuth: []
      responses:
        200:
          description: Delete Success
        400:
          description: Bad Input Parameter
        404:
          description: User Not Found
  /user/{id}/password: 
    put:
      tags:
          - User
      summary: Change user password
      operationId: Change user password
      parameters:
        - in: query
          name: id
          description: Id to be passed as a query
          required: true
          schema:
            type: string
            format: uuid
        - in: query
          name: object
          description: User object that needs to be update
          required: true
          schema:
            $ref: "#/components/schemas/UserChangePassword"
      security:
        - bearerAuth: []
      responses:
        200:
          description: Password Changed Successfully
        400:
          description: Bad Input Parameter
        404:
          description: User Not Found

  /admin/register: 
    post: 
      tags:
        - Admin
      summary: Register Admin
      operationId: Register
      parameters:
        - in: query
          name: object
          description: Admin object that needs to be Register
          required: true
          schema:
            $ref: "#/components/schemas/AdminRegister"
      responses:
        200:
          description: Register Successfully
        400:
          description: Bad Input Parameter
  /admin/login: 
    post: 
      tags:
        - Admin
      summary: Login admin
      operationId: Login
      parameters:
        - in: query
          name: object
          description: Admin Object that needs to be login
          required: true
          schema:
            $ref: "#/components/schemas/AdminLogin"
      responses:
        200:
          description: Login Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AdminIdToken"
        400:
          description: Bad Input Parameter
        401:
          description: Incorrect Email or Password
        404:
          description: User Not Found
  /admin/logout/{id}: 
    post: 
      tags:
        - Admin
      summary: Logout Admin
      operationId: Logout
      parameters:
        - in: query
          name: id
          description: Id to be passed as a query
          required: true
          schema:
            type: string
            format: uuid
      security:
        - bearerAuth: []
      responses:
        200:
          description: Logout Success
        400:
          description: Bad Input Parameter
        404:
          description: User Not Found
  /admin/{id}: 
    get: 
      tags:
        - Admin
      summary: Get Admin profile
      operationId: get Admin profile
      parameters:
        - in: query
          name: id
          description: Id to be passed as a query
          required: true
          schema:
            type: string
            format: uuid
      security:
        - bearerAuth: []
      responses:
        200:
          description: Successful Operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AdminData"
        400:
          description: Bad Input Parameter
        404:
          description: User Not Found
    put:
      tags:
          - Admin
      summary: Update Admin profile
      operationId: Update Admin profile
      parameters:
        - in: query
          name: id
          description: Id to be passed as a query
          required: true
          schema:
            type: string
            format: uuid
        - in: query
          name: object
          description: Admin object that needs to be update
          required: true
          schema:
            $ref: "#/components/schemas/AdminData"
      security:
        - bearerAuth: []
      responses:
        200:
          description: Update Admin Information Success
        400:
          description: Bad Input Parameter
        404:
          description: User Not Found
    delete:
      tags:
        - Admin
      summary: delete Admin
      operationId: delete Admin 
      parameters:
        - in: query
          name: id
          description: Id to be passed as a query
          required: true
          schema:
            type: string
            format: uuid
      security:
        - bearerAuth: []
      responses:
        200:
          description: Delete Success
        400:
          description: Bad Input Parameter
        404:
          description: User Not Found
  /admin/{id}/password: 
    put:
      tags:
          - Admin
      summary: change Admin password
      operationId: change Admin password
      parameters:
        - in: query
          name: id
          description: Id to be passed as a query
          required: true
          schema:
            type: string
            format: uuid
        - in: query
          name: object
          description: Admin object that needs to be update
          required: true
          schema:
            $ref: "#/components/schemas/AdminChangePassword"
      security:
        - bearerAuth: []
      responses:
        200:
          description: Password Changed Successfully
        400:
          description: Bad Input Parameter
        404:
          description: User Not Found
          
  /productcategory: 
    post: 
      tags:
          - Product Category
      summary: Insert New Product Category
      operationId: Insert New Product Category
      parameters:
        - in: query
          name: object
          description: object that needs to be insert
          required: true
          schema:
            $ref: "#/components/schemas/ProductCategoryModel"
      responses:
        200:
          description: Successful Operation
        400:
          description: Bad Input Parameter
      security:
        - bearerAuth: []
    get:
      tags:
          - Product Category
      summary: Get List of Product Category
      operationId: Get List of Product Category
      security:
        - bearerAuth: []
      responses:
        200:
          description: Successful Operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductCategoryView"
  /productcategory/{id}: 
    get: 
      tags:
          - Product Category
      summary: Get Product Category
      operationId: Get Product Category
      parameters:
        - in: path
          name: id
          description: Id to be passed as a path 
          required: true
          schema:
            type: string
            format: uuid
      security:
        - bearerAuth: []
      responses:
        200:
          description: Successful Operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductCategoryView"
        400:
          description: Bad Input Parameter
        404:    
          description: Not Found
    put:
      tags:
          - Product Category
      summary: Update Product Category
      operationId: Update Product Category
      parameters:
        - in: path
          name: id
          description: Id to be passed as a path 
          required: true
          schema:
            type: string
            format: uuid
        - in: query
          name: name
          description: name to be passed as a query 
          required: true
          schema:
            type: string
      security:
        - bearerAuth: []
      responses:
        200:
          description: Successful Operation
        400:
          description: Bad Input Parameter
        404:    
          description: Not Found
    delete:
      tags:
        - Product Category
      summary: Delete Product Category
      operationId: delete Product Category 
      parameters:
        - in: path
          name: id
          description: Id to be passed as a path
          required: true
          schema:
            type: string
            format: uuid
      security:
        - bearerAuth: []
      responses:
        200:
          description: Successful Operation
        400:
          description: Bad Input Parameter
        404:    
          description: Not Found
  /product: 
    post: 
      tags:
          - Product 
      summary: Insert New Product 
      operationId: Insert New Product 
      parameters:
        - in: query
          name: object
          description: object that needs to be insert
          required: true
          schema:
            $ref: "#/components/schemas/ProductInsertDto"
      security:
        - bearerAuth: []
      responses:
        200:
          description: Successful Operation
        400:
          description: Bad Input Parameter      
    get:
      tags:
          - Product 
      summary: Get Product By Parameters 
      operationId: Get Product By parameters  
      parameters:
        - in: query
          name: id
          description: Id to be passed as a path
          schema:
            type: string
            format: uuid
          required: false
        - in: query
          name: isactive
          description: isactive to be passed as a query
          required: false
          schema:
            type: boolean
        - in: query
          name: categoryname
          description: categoryname to be passed as a query
          required: false
          schema:
            type: string
        - in: query
          name: code
          description: code to be passed as a query
          required: false
          schema:
            type: string
        - in: query
          name: name
          description: name to be passed as a query
          required: false
          schema:
            type: string
      security:
        - bearerAuth: []
      responses:
        200:
          description: Successful Operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductView"
        400:
          description: Bad Input Parameter
  /product/{id}: 
    put: 
      tags:
          - Product 
      summary: Update Product 
      operationId: Update Product 
      parameters:
        - in: query
          name: id
          description: Id to be passed as a query
          required: true
          schema:
            type: string
            format: uuid
        - in: query
          name: object
          description: object that needs to be update
          required: true
          schema:
            $ref: "#/components/schemas/ProductUpdateDto"
      security:
        - bearerAuth: []
      responses:
        200:
          description: Successful Operation
        400:
          description: Bad Input Parameter      
        404:    
          description: Not Found
    delete:
      tags:
        - Product 
      summary: Delete Product 
      operationId: delete Product 
      parameters:
        - in: path
          name: id
          description: Id to be passed as a path
          required: true
          schema:
            type: string
            format: uuid
      security:
        - bearerAuth: []
      responses:
        200:
          description: Successful Operation
        400:
          description: Bad Input Parameter      
        404:    
          description: Not Found
  /purchasereceiving: 
    post: 
      tags:
          - Purchase Receiving 
      summary: Insert New Purchase Receiving  
      operationId: Insert New Purchase Receiving 
      parameters:
        - in: query
          name: object
          description: object that needs to be insert
          required: true
          schema:
            $ref: "#/components/schemas/PurchaseReceivingInsertDto"
      security:
        - bearerAuth: []
      responses:
        200:
          description: Successful Operation
        400:
          description: Bad Input Parameter     
    get:
      tags:
          - Purchase Receiving  
      summary: Get Purchase Receiving By parameters 
      operationId: Get Purchase Receiving By parameters  
      parameters:
        - in: query
          name: id
          description: Id to be passed as a query
          required: false       
          schema:
            type: string
            format: uuid
        - in: query
          name: code
          description: code to be passed as a query
          required: false
          schema:
            type: string
        - in: query
          name: datefrom
          description: datefrom to be passed as a query
          required: false
          schema:
            type: string
            format: date
        - in: query
          name: dateto
          description: dateto to be passed as a query
          required: false
          schema:
            type: string
            format: date
      security:
        - bearerAuth: []
      responses:
        200:
          description: Successful Operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PurchaseReceivingView"
        
        400:
          description: Bad Input Parameter  
  /purchasereceiving/{id}: 
    put: 
      tags:
          - Purchase Receiving  
      summary: Update Purchase Receiving  
      operationId: Update Purchase Receiving  
      parameters:
        - in: query
          name: object
          description: object that needs to be update
          required: true
          schema:
            $ref: "#/components/schemas/PurchaseReceivingUpdateDto"
      security:
        - bearerAuth: []
      responses:
        200:
          description: Successful Operation
        400:
          description: Bad Input Parameter      
        404:    
          description: Not Found
    delete:
      tags:
        - Purchase Receiving 
      summary: Delete Purchase Receiving  
      operationId: delete Purchase Receiving  
      parameters:
        - in: path
          name: id
          description: Id to be passed as a path
          required: true
          schema:
            type: string
            format: uuid
      security:
        - bearerAuth: []
      responses:
        200:
          description: Successful Operation
        400:
          description: Bad Input Parameter      
        404:    
          description: Not Found


  /user/{id}/shoppingcart:
    get:
      tags:
        - Shopping Cart
      summary: searches inventory
      operationId: searchInventory
      description: |
        By passing in the appropriate options, you can search for
        available inventory in the system
      parameters:
        - in: query
          name: searchString
          description: pass an optional search string for looking up inventory
          required: false
          schema:
            type: string
        - in: query
          name: skip
          description: number of records to skip for pagination
          schema:
            type: integer
            format: int32
            minimum: 0
        - in: query
          name: limit
          description: maximum number of records to return
          schema:
            type: integer
            format: int32
            minimum: 0
            maximum: 50
      responses:
        "200":
          description: search results matching criteria
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/InventoryItem"
        "400":
          description: bad input parameter
  /shoppingcart:
    post:
      tags:
        - Shopping Cart
      summary: adds an inventory item
      operationId: addInventory
      description: Adds an item to the system
      responses:
        "201":
          description: item created
        "400":
          description: "invalid input, object invalid"
        "409":
          description: an existing item already exists
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/InventoryItem"
        description: Inventory item to add
components:
  securitySchemes:
      bearerAuth:            # arbitrary name for the security scheme
        type: http
        scheme: bearer
        bearerFormat: JWT    # optional, arbitrary value for documentation purposes
  schemas:
    UserRegister:
      type: object
      properties:
        email:
          type: string
          example: abc@def.com
        firstName:
          type: string
          example: Hardi
        lastname:
          type: string
          example: Jackson
        password:
          type: string
          example: Abcd123
      xml:
        name: "Register User"
    UserLogin:
      type: object
      properties:
        email:
          type: string
          example: abc@def.com
        password:
          type: string
          example: Abcd123
      xml:
        name: "user Login"
    UserIdToken:
      type: object
      properties:
        id:
          type: string
          format: uuid
        token:
          type: string
          example: "eyJhbGciOiJIUZI1NiIsInR5CCI6IkpXVCJ9.eyJzdWIiOiIxMjMONTY
              30DkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4i0nRydWV9.TJVA95
              OrM7E2cBab3 ORMHrHDcEfxjoYZgeFONFhHgQ"
      xml:
        name: "User Id and Token"
    UserData:
      type: object
      properties:
        email:
          type: string
          example: abc@def.com
        firstName:
          type: string
          example: Hardi
        lastname:
          type: string
          example: Jackson
        handphone:
          type: string
          example: 081234567891
        address:
          type: string
          example: Jl. Kebun Raya Pulau No 300
      xml:
        name: "User Data"
    UserChangePassword:
      type: object
      properties:
        password:
          type: string
          example: Abcd123
        oldpassword:
          type: string
          example: Abcd125
      xml:
        name: "Change User Password"
    
    AdminRegister:
      type: object
      properties:
        email:
          type: string
          example: abc@def.com
        firstName:
          type: string
          example: Hardi
        lastname:
          type: string
          example: Jackson
        password:
          type: string
          example: Abcd123
      xml:
        name: "Register Admin"
    AdminLogin:
      type: object
      properties:
        email:
          type: string
          example: abc@def.com
        password:
          type: string
          example: Abcd123
      xml:
        name: "Admin Login"
    AdminIdToken:
      type: object
      properties:
        id:
          type: string
          format: uuid
        token:
          type: string
          example: "eyJhbGciOiJIUZI1NiIsInR5CCI6IkpXVCJ9.eyJzdWIiOiIxMjMONTY
              30DkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4i0nRydWV9.TJVA95
              OrM7E2cBab3 ORMHrHDcEfxjoYZgeFONFhHgQ"
      xml:
        name: "Admin Id and Token"
    AdminData:
      type: object
      properties:
        email:
          type: string
          example: abc@def.com
        firstName:
          type: string
          example: Hardi
        lastname:
          type: string
          example: Jackson
      xml:
        name: "Admin Data"
    AdminChangePassword:
      type: object
      properties:
        password:
          type: string
          example: Abcd123
        oldpassword:
          type: string
          example: Abcd125
      xml:
        name: "Change Admin Password"
    
    ProductCategoryModel:
      type: object
      properties:
        code:
          type: string
          example: PC0001
        name:
          type: string
          example: Mie Instan
    ProductCategoryView:
      type: array
      items:
        type: object
        properties:
          id:
            type: string
            format: uuid
          code:
            type: string
            example: PC0001
          name:
            type: string
            example: Mie Instan

    ProductInsertDto:
      type: object
      properties:
        code:
          type: string
          example: P0001
        name:
          type: string
          example: Minyaku
        price:
          type: number
          example: 10000
        isactive: 
          type: boolean
          example: 1
        productcategoryid: 
          type: string
          format: uuid
        unitname: 
          type: string
          example: buah
        description:
          type: string
          example: Minyak Berkualitas
    ProductUpdateDto:
      type: object
      properties:
        name:
          type: string
          example: Minyakmu
        price:
          type: number
          example: 50
        isactive: 
          type: boolean
          example: 1
        productcategoryid: 
          type: string
          format: uuid
        unitname: 
          type: string
          example: buah
        description:
          type: string
          example: Minyak Tidak Berkualitas   
    ProductView:
      type: array
      items:
        type: object
        properties:
          id:
            type: string
            format: uuid
          code:
            type: string
            example: P0001
          name:
            type: string
            example: Minyaku
          qty:
            type: number
            example: 10
          qtyshoppingcart:
            type: number
            example: 2
          price:
            type: number
            example: 50
          isactive: 
            type: boolean
            example: 1
          productcategoryid: 
            type: string
            format: uuid
          unitname: 
            type: string
            example: buah
          description:
            type: string
            example: Minyak Tidak Berkualitas   

    PurchaseReceivingInsertDto:
      type: object
      properties:
        code:
          type: string
          example: PR0001
        invoicedate:
          type: string
          format: date
        receivedby:
          type: string
          example: Bambang
        description: 
          type: string
          example: Pembelian Berhasil
        details: 
          type: array
          items:
            type: object
            properties:
              ProductId:
                type: string
                format: uuid
              Price:
                type: number
                example: 1000000
              qty:
                type: number
                example: 100
    PurchaseReceivingUpdateDto:
      type: object
      properties:
        invoicedate:
          type: string
          format: date
        receivedby:
          type: string
          example: Bambang
        description: 
          type: string
          example: Pembelian Berhasil 
        details: 
          type: array
          items:
            type: object
            properties:
              ProductId:
                type: string
                format: uuid
              Price:
                type: number
                example: 1000000
              qty:
                type: number
                example: 50
    PurchaseReceivingView:
      type: array
      items:
        type: object
        properties:
          id:
            type: string
            format: uuid
          code:
            type: string
            example: PR0001
          invoicedate:
            type: string
            format: date
          receivedby:
            type: string
            example: Bambang
          description: 
            type: string
            example: Pembelian Berhasil
          details: 
            type: array
            items:
              type: object
              properties:
                ProductName:
                  type: string
                  example: Permen Karet
                Price:
                  type: number
                  example: 1000
                qty:
                  type: number
                  example: 50

    InventoryItem:
      type: object
      required:
        - id
        - name
        - manufacturer
        - releaseDate
      properties:
        id:
          type: string
          format: uuid
          example: d290f1ee-6c54-4b01-90e6-d701748f0851
        name:
          type: string
          example: Widget Adapter
        releaseDate:
          type: string
          format: date-time
          example: "2016-08-29T09:12:33.001Z"
        manufacturer:
          $ref: "#/components/schemas/Manufacturer"
    Manufacturer:
      required:
        - name
      properties:
        name:
          type: string
          example: ACME Corporation
        homePage:
          type: string
          format: url
          example: "https://www.acme-corp.com"
        phone:
          type: string
          example: 408-867-5309
      type: object
